import java.util.*;

class Node {
    int data;
    Node left, right;

    Node(int val) {
        data = val;
        left = right = null;
    }
}

class BST {
    Node root;

    BST() {
        root = null;
    }

    Node insert(Node node, int val) {
        if (node == null) {
            return new Node(val);
        }
        if (val < node.data) {
            node.left = insert(node.left, val);
        } else if (val > node.data) {
            node.right = insert(node.right, val);
        }
        return node;
    }

    Node search(Node node, int val) {
        if (node == null || node.data == val) {
            return node;
        }
        if (val < node.data) {
            return search(node.left, val);
        }
        return search(node.right, val);
    }

    Node findMin(Node node) {
        while (node != null && node.left != null) {
            node = node.left;
        }
        return node;
    }

    Node deleteNode(Node root, int val) {
        if (root == null) return root;

        if (val < root.data) {
            root.left = deleteNode(root.left, val);
        } else if (val > root.data) {
            root.right = deleteNode(root.right, val);
        } else {
            if (root.left == null) {
                return root.right;
            } else if (root.right == null) {
                return root.left;
            }

            Node temp = findMin(root.right);
            root.data = temp.data;
            root.right = deleteNode(root.right, temp.data);
        }
        return root;
    }

    void inOrder(Node node) {
        if (node == null) return;
        inOrder(node.left);
        System.out.print(node.data + " ");
        inOrder(node.right);
    }

    void preOrder(Node node) {
        if (node == null) return;
        System.out.print(node.data + " ");
        preOrder(node.left);
        preOrder(node.right);
    }

    void postOrder(Node node) {
        if (node == null) return;
        postOrder(node.left);
        postOrder(node.right);
        System.out.print(node.data + " ");
    }

    public static void main(String[] args) {
        BST tree = new BST();
        int[] values = {25, 15, 10, 22, 35, 30, 40};
        for (int val : values) {
            tree.root = tree.insert(tree.root, val);
        }

        System.out.print("InOrder traversal: ");
        tree.inOrder(tree.root);
        System.out.println();

        System.out.print("PreOrder traversal: ");
        tree.preOrder(tree.root);
        System.out.println();

        System.out.print("PostOrder traversal: ");
        tree.postOrder(tree.root);
        System.out.println();

        System.out.println("Search for 22: " + (tree.search(tree.root, 22) != null ? "Found" : "Not Found"));

        System.out.println("Delete 10");
        tree.root = tree.deleteNode(tree.root, 10);
        System.out.print("InOrder traversal after deletion: ");
        tree.inOrder(tree.root);
        System.out.println();
    }
}
